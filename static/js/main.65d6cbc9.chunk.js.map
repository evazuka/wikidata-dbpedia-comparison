{"version":3,"sources":["components/Statistics.tsx","components/App.tsx","query-dispatcher.ts","queries/wikidataTreeQuery.ts","components/Tree.tsx","queries/dbpediaTreeQuery.ts","components/TreeComparison.tsx","queries/wikidataFilmQuery.ts","queries/dbpediaFilmQuery.ts","components/Filmography.tsx","components/FilmographyComparison.tsx","components/Routing.tsx","components/Footer.tsx","index.tsx"],"names":["QueryStatus","App","props","handleTypeChange","event","setState","comparisonType","target","value","getCurrentUrl","state","Error","error","handleChange","bind","handleSubmit","this","undefined","wikiIdUri","split","wikiId","decodeURI","fetch","body","json","result","pages","query","firstKey","Object","keys","wikiDataId","pageprops","wikibase_item","history","push","className","type","onChange","onKeyDown","keyCode","style","width","onClick","name","checked","marginBottom","to","React","Component","SPARQLQueryDispatcher","endpoint","sparqlQuery","fullUrl","encodeURIComponent","headers","then","mapRootQuery","data","map","x","id","person","personLabel","birth","death","picture","pic","parent","WikidataTreeQuery","endpointUrl","rootSparqlQuery","wikidataId","queryDispatcher","a","queryRoot","results","bindings","queryData","descendant","descendantLabel","birthYear","deathYear","image","personId","rootQueryData","tree","root","d3","d","parentId","dy","height","nodeSize","getDatesSubtitle","subtitle","Tree","ref","renderD3","dx","x0","Infinity","x1","each","uniqueId","Math","random","svg","g","append","attr","node","selectAll","links","join","y","descendants","children","text","clone","lower","call","extent","scaleExtent","on","transform","window","innerHeight","OverviewComponent","overview","status","time","nodeCount","Statistics","wikidataQueryOverview","dbpediaQueryOverview","label","yob","yod","DBpediaTreeQuery","dbpediaId","TreeComparison","wikidataTreeQuery","dbpediaTreeQuery","NotStarted","dbpediaTreeData","wikidataTreeData","startComparison","startWikidataQuery","startDbPediaQuery","prev","Running","dbpediaUrlId","match","params","startTime","Date","getTime","endTime","console","log","Finished","length","Failed","forceRenderTabPanel","WikidataFilmQuery","film","filmLabel","description","filmDescription","year","pic1","pic2","sort","b","parseInt","DBpediaFilmQuery","thumbnail","FilmCard","src","Filmography","filmData","index","key","FilmographyComparison","wikidataFilmQuery","dbpediaFilmQuery","dbpediaFilmData","wikidataFilmData","Routing","path","render","Footer","href","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.65d6cbc9.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { RouteComponentProps } from \"react-router-dom\"\r\n\r\nexport enum QueryStatus {\r\n    NotStarted,\r\n    Running,\r\n    Finished,\r\n    Failed\r\n}\r\n\r\nexport type QueryOverview = {\r\n    status: QueryStatus,\r\n    time: number | null,\r\n    nodeCount: number | null,\r\n    error: string | null,\r\n}\r\n\r\ntype Props = {\r\n    wikidataQueryOverview: QueryOverview\r\n    dbpediaQueryOverview: QueryOverview\r\n}\r\n\r\nconst OverviewComponent: React.FC<{ overview: QueryOverview }> = ({ overview }) => (\r\n    <>\r\n        <p><strong>Status:</strong> {QueryStatus[overview.status]}</p>\r\n        {overview.time !== null\r\n            ? <p><strong>Time:</strong> {overview.time} ms</p>\r\n            : null}\r\n        {overview.nodeCount !== null\r\n            ? <p><strong>Node count:</strong> {overview.nodeCount}</p>\r\n            : null}\r\n\r\n        {overview.error !== null\r\n            ? <p><strong>Error:</strong> {overview.error}</p>\r\n            : null}\r\n    </>)\r\n\r\nclass Statistics extends React.Component<Props> {\r\n    render() {\r\n        const { wikidataQueryOverview, dbpediaQueryOverview } = this.props\r\n        return (\r\n            <div>\r\n                <h3>Wikidata Query Overview</h3>\r\n                <OverviewComponent overview={wikidataQueryOverview} />\r\n\r\n                <hr />\r\n\r\n                <h3>DBpedia Query Overview</h3>\r\n                <OverviewComponent overview={dbpediaQueryOverview} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Statistics","import React from \"react\";\r\nimport { Link, RouteComponentProps } from \"react-router-dom\";\r\nimport \"../index.css\";\r\n\r\ntype State = {\r\n    value: string,\r\n    comparisonType: 'tree' | 'filmography'\r\n    error: string | null\r\n}\r\n\r\nclass App extends React.Component<RouteComponentProps<any>, State> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: \"\", error: null, comparisonType: 'tree' }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value, error: null })\r\n    }\r\n\r\n    async handleSubmit() {\r\n        const wikiIdUri = this.state.value.split('wiki/')?.[1]?.split('?')?.[0]?.split('/')?.[0];\r\n        if (wikiIdUri === undefined)\r\n            return this.setState({ error: 'Wrong URL entered! Try https://en.wikipedia.org/wiki/Elizabeth_II' })\r\n\r\n        const wikiId = decodeURI(wikiIdUri);\r\n\r\n        const url = \"https://en.wikipedia.org/w/api.php?origin=*&format=json&action=query&prop=pageprops&ppprop=wikibase_item&redirects=1&titles=\";\r\n\r\n        try {\r\n            const body = await fetch(url + wikiId)\r\n            const result = await body.json()\r\n\r\n            const pages = result.query.pages\r\n            const firstKey = Object.keys(pages)[0]\r\n\r\n            if (firstKey === '-1')\r\n                return this.setState({ error: `There's no data about this item in knowledge bases` })\r\n\r\n            const wikiDataId = pages[firstKey].pageprops.wikibase_item\r\n\r\n            return this.props.history.push(`/${this.getCurrentUrl()}/${wikiDataId}/${wikiId}`);\r\n        } catch (e) {\r\n            return this.setState({ error: 'Error happend while retrieval of this item' })\r\n        }\r\n    }\r\n\r\n    handleTypeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ comparisonType: event.target.value as any })\r\n    }\r\n\r\n    getCurrentUrl = () => {\r\n        switch (this.state.comparisonType) {\r\n            case 'tree':\r\n                return 'tree-comparison'\r\n            case 'filmography':\r\n                return 'filmography-comparison'\r\n            default: throw Error('Wrong comparison type')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h2>The comparison of Wikidata and DBpedia knowledge bases</h2> <br />\r\n                <p>Enter the link to the person's page on Wikipedia to build a family tree of his descendants or check his filmography</p> <br />\r\n                <div>\r\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} onKeyDown={(event) => {\r\n                        if (event.keyCode === 13) return this.handleSubmit()\r\n                    }} style={{ width: \"500px\" }} />\r\n                    <button onClick={this.handleSubmit}>View</button>\r\n                </div>\r\n                {this.state.error !== undefined\r\n                    ? <p className=\"error\">{this.state.error}</p>\r\n                    : null\r\n                }\r\n                <div className=\"checkbox-group\">\r\n                    <label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"comparison-type\"\r\n                            value=\"tree\"\r\n                            checked={this.state.comparisonType === 'tree'}\r\n                            onChange={this.handleTypeChange}\r\n                        />\r\n                        Compare family trees\r\n                    </label>\r\n                    <label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"comparison-type\"\r\n                            value=\"filmography\"\r\n                            checked={this.state.comparisonType === 'filmography'}\r\n                            onChange={this.handleTypeChange}\r\n                        />\r\n                        Compare filmography\r\n                    </label>\r\n                </div>\r\n                <p style={{ marginBottom: 0 }}>Or try this examples:</p>\r\n                <ul>\r\n                    <li><Link to={`/${this.getCurrentUrl()}/Q318263/Michael_Redgrave`}>Michael Redgrave</Link> (https://en.wikipedia.org/wiki/Michael_Redgrave)</li>\r\n                    <li><Link to={`/${this.getCurrentUrl()}/Q882/Charlie_Chaplin`}>Charlie Chaplin</Link> (https://en.wikipedia.org/wiki/Charlie_Chaplin)</li>\r\n                    <li><Link to={`/${this.getCurrentUrl()}/Q9960/Ronald_Reagan`}>Ronald Reagan</Link> (https://en.wikipedia.org/wiki/Ronald_Reagan)</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","class SPARQLQueryDispatcher {\r\n    endpoint: string;\r\n\r\n    constructor(endpoint: string) {\r\n        this.endpoint = endpoint;\r\n    }\r\n\r\n    query(sparqlQuery: string) {\r\n        const fullUrl = this.endpoint + '?query=' + encodeURIComponent(sparqlQuery) + '&format=json';\r\n        const headers = { 'Accept': 'application/sparql-results+json' };\r\n        return fetch(fullUrl, { headers }).then(body => body.json());\r\n    }\r\n}\r\n\r\nexport default SPARQLQueryDispatcher","import SPARQLQueryDispatcher from '../query-dispatcher'\r\nimport { TreeData } from '../components/Tree'\r\n\r\nconst mapQuery = (data): TreeData[] => {\r\n    return data\r\n        .map((x: any) => ({\r\n            id: x.descendant.value,\r\n            name: x.descendantLabel.value,\r\n            birth: x.birthYear.value,\r\n            death: x.deathYear.value,\r\n            picture: x.image.value,\r\n            parent: x.personId.value\r\n        }));\r\n}\r\n\r\nconst mapRootQuery = (data): TreeData[] => {\r\n    return data\r\n        .map((x: any) => ({\r\n            id: x.person.value,\r\n            name: x.personLabel.value,\r\n            birth: x.birth.value,\r\n            death: x.death.value,\r\n            picture: x.pic.value,\r\n            parent: \"\"\r\n        }));\r\n}\r\n\r\nclass WikidataTreeQuery {\r\n    private endpointUrl = 'https://query.wikidata.org/sparql';\r\n    private rootSparqlQuery = (wikidataId: string) => `SELECT DISTINCT ?person ?personLabel ?birth ?death ?pic WHERE {\r\n        BIND (wd:${wikidataId} as ?person) .\r\n        OPTIONAL {?person wdt:P18 ?picture . }\r\n        OPTIONAL {?person wdt:P569 ?dob . }\r\n        OPTIONAL {?person wdt:P570 ?dod . }\r\n        BIND(YEAR(?dob) as ?yob) .\r\n        BIND(YEAR(?dod) as ?yod) .\r\n        BIND(COALESCE(?picture, \"\") as ?pic) .\r\n        BIND(COALESCE(?yob, \"\") as ?birth) .\r\n        BIND(COALESCE(?yod, \"\") as ?death) .\r\n              SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\r\n        } LIMIT 1`\r\n    private sparqlQuery = (wikidataId: string) => `SELECT ?descendant ?descendantLabel (SAMPLE(?person) AS ?personId) (SAMPLE(?birth) AS ?birthYear) (SAMPLE(?death) AS ?deathYear) (SAMPLE(?pic) AS ?image) WHERE {\r\n        wd:${wikidataId} wdt:P40* ?person .\r\n        ?person wdt:P40 ?descendant .\r\n        OPTIONAL { ?descendant wdt:P18 ?picture . }\r\n        OPTIONAL {?descendant wdt:P569 ?dob . }\r\n        OPTIONAL {?descendant wdt:P570 ?dod . }\r\n        BIND(YEAR(?dob) as ?yob) .\r\n        BIND(YEAR(?dod) as ?yod) .\r\n        BIND(COALESCE(?picture, \"\") as ?pic) .\r\n        BIND(COALESCE(?yob, \"\") as ?birth) .\r\n        BIND(COALESCE(?yod, \"\") as ?death) .\r\n              SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\r\n        } GROUP BY ?descendant ?descendantLabel`;\r\n\r\n    private queryDispatcher = new SPARQLQueryDispatcher(this.endpointUrl);\r\n\r\n    query = async (wikidataId: string) => {\r\n        const query = await this.queryDispatcher.query(this.sparqlQuery(wikidataId))\r\n        const queryRoot = await this.queryDispatcher.query(this.rootSparqlQuery(wikidataId))\r\n\r\n        const queryData = mapQuery(query.results.bindings)\r\n        const rootQueryData = mapRootQuery(queryRoot.results.bindings)\r\n\r\n        return [...queryData, ...rootQueryData]\r\n    }\r\n}\r\n\r\nexport default WikidataTreeQuery","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst width = 800;\r\n\r\nconst tree = (data: TreeData[]) => {\r\n    const root = d3.stratify<TreeData>()\r\n        .id(d => d.id)\r\n        .parentId(d => d.parent)\r\n        (data);\r\n\r\n    const dx = 10;\r\n    const dy = width / (root.height + 1);\r\n\r\n    return [d3.tree<TreeData>().nodeSize([50, 150])(root), dx, dy] as const;\r\n}\r\n\r\nconst getDatesSubtitle = (d: d3.HierarchyPointNode<TreeData>) => {\r\n    let subtitle = ''\r\n    if (d.data.birth !== '')\r\n        subtitle += `b. ${d.data.birth}`;\r\n\r\n    if (d.data.death !== '') {\r\n        if (d.data.birth)\r\n            subtitle += ' - ';\r\n        subtitle += `d. ${d.data.death}`;\r\n    }\r\n\r\n    return subtitle;\r\n}\r\n\r\nexport type TreeData = {\r\n    id: string,\r\n    name: string,\r\n    birth: string,\r\n    death: string,\r\n    picture: string,\r\n    parent: string\r\n}\r\n\r\ntype Props = {\r\n    data: TreeData[]\r\n}\r\n\r\nclass Tree extends React.Component<Props> {\r\n    ref!: Element\r\n\r\n    componentDidMount() {\r\n        this.renderD3();\r\n    }\r\n\r\n    renderD3 = () => {\r\n        const [root, dx, dy] = tree(this.props.data);\r\n\r\n        let x0 = Infinity;\r\n        let x1 = -x0;\r\n        root.each(d => {\r\n            if (d.x > x1) x1 = d.x;\r\n            if (d.x < x0) x0 = d.x;\r\n        });\r\n\r\n        const uniqueId = Math.random();\r\n\r\n        const svg = d3.select(this.ref);\r\n\r\n        const g = svg.append(\"g\")\r\n            .attr(\"font-family\", \"sans-serif\")\r\n            .attr(\"font-size\", 10)\r\n            .attr(\"transform\", `translate(${dy / 3},${dx - x0})`);\r\n\r\n        const link = g.append(\"g\")\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"#555\")\r\n            .attr(\"stroke-opacity\", 0.4)\r\n            .attr(\"stroke-width\", 1.5)\r\n            .selectAll(\"path\")\r\n            .data(root.links())\r\n            .join(\"path\")\r\n            .attr(\"d\", d3.linkHorizontal()\r\n                .x((d: any) => d.y)\r\n                .y((d: any) => d.x) as any);\r\n\r\n        const node = g.append(\"g\")\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-width\", 3)\r\n            .selectAll(\"g\")\r\n            .data(root.descendants())\r\n            .join(\"g\")\r\n            .attr(\"transform\", d => `translate(${d.y},${d.x})`);\r\n\r\n        svg.append(\"defs\")\r\n            .append(\"clipPath\")\r\n            .attr(\"id\", \"circleClip\" + uniqueId)\r\n            .append(\"circle\")\r\n            .attr(\"r\", 20);\r\n\r\n        node.append(\"circle\")\r\n            .attr(\"r\", 20)\r\n            .attr(\"fill\", \"grey\");\r\n\r\n        node.append(\"svg:image\")\r\n            .attr(\"xlink:href\", d => d.data.picture)\r\n            .attr(\"clip-path\", \"url(#circleClip\" + uniqueId + \")\")\r\n            .attr(\"x\", -20)\r\n            .attr(\"y\", -20)\r\n            .attr(\"height\", 40)\r\n            .attr(\"width\", 40)\r\n            .attr('preserveAspectRatio', 'xMidYMid slice');\r\n\r\n        node.append(\"text\")\r\n            .attr(\"dy\", \"0.31em\")\r\n            .attr(\"x\", d => d.children ? -22 : 22)\r\n            .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\r\n            .text(d => d.data.name)\r\n            .clone(true).lower()\r\n            .attr(\"stroke\", \"white\");\r\n\r\n        node.append(\"text\")\r\n            .attr(\"dy\", \"1.3em\")\r\n            .attr(\"x\", d => d.children ? -22 : 22)\r\n            .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\r\n            .text(getDatesSubtitle)\r\n            .clone(true).lower()\r\n            .attr(\"stroke\", \"white\");\r\n\r\n        function zoomed() {\r\n            g.attr(\"transform\", d3.event.transform);\r\n        }\r\n\r\n        svg.attr(\"viewBox\", [0, 0, width, x1 - x0 + dx * 2] as any)\r\n            .call(d3.zoom()\r\n                .extent([[0, 0], [width, x1 - x0 + dx * 2]])\r\n                .scaleExtent([1, 8])\r\n                .on(\"zoom\", zoomed))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <svg className=\"container\" ref={(ref: SVGSVGElement) => this.ref = ref} width={800} height={window.innerHeight - 100}>\r\n            </svg>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Tree","import SPARQLQueryDispatcher from '../query-dispatcher'\r\nimport { TreeData } from '../components/Tree'\r\n\r\nconst mapQuery = (data): TreeData[] => {\r\n    return data\r\n        .map((x: any) => ({\r\n            id: x.descendant.value,\r\n            name: x.label.value,\r\n            birth: x.yob.value,\r\n            death: x.yod.value,\r\n            picture: x.pic.value,\r\n            parent: x.person.value\r\n        }));\r\n}\r\n\r\nconst mapRootQuery = (data): TreeData[] => {\r\n    return data\r\n        .map((x: any) => ({\r\n            id: x.person.value,\r\n            name: x.label.value,\r\n            birth: x.yob.value,\r\n            death: x.yod.value,\r\n            picture: x.pic.value,\r\n            parent: \"\"\r\n        }));\r\n}\r\n\r\nclass DBpediaTreeQuery {\r\n    private endpointUrl = 'https://dbpedia.org/sparql';\r\n    private rootSparqlQuery = (dbpediaId: string) => `PREFIX dbo: <http://dbpedia.org/ontology/> \r\n    SELECT DISTINCT ?person ?pic ?label ?yob ?yod \r\n    WHERE {\r\n         BIND(<${dbpediaId}> as ?person)\r\n         ?person rdfs:label ?label .\r\n         OPTIONAL { ?person  dbo:birthDate ?dob} \r\n         OPTIONAL { ?person  dbo:deathDate ?dod}\r\n         OPTIONAL { ?person dbo:thumbnail ?thumbnail} \r\n         BIND(IF(bound(?dob),\r\n         YEAR(xsd:dateTime(?dob)),\r\n         \"\") as ?yob)\r\n         BIND(IF(bound(?dod),\r\n         YEAR(xsd:dateTime(?dod)),\r\n         \"\") as ?yod)\r\n         BIND(COALESCE(?thumbnail, \"\") as ?pic) .\r\n              FILTER (lang(?label) = 'en')\r\n    } LIMIT 1`\r\n    private sparqlQuery = (dbpediaId: string) => `PREFIX dbo: <http://dbpedia.org/ontology/> \r\n    SELECT DISTINCT ?person ?pic ?label ?yob ?yod ?descendant\r\n    WHERE {\r\n         ?person dbo:parent* <${dbpediaId}> \r\n         OPTIONAL { ?descendant dbo:parent ?person }\r\n         BIND(?person as ?person)\r\n         OPTIONAL { ?descendant rdfs:label ?label }\r\n         OPTIONAL { ?descendant  dbo:birthDate ?dob} \r\n         OPTIONAL { ?descendant  dbo:deathDate ?dod}\r\n         OPTIONAL { ?descendant dbo:thumbnail ?thumbnail} \r\n         BIND(IF(bound(?dob),\r\n         YEAR(xsd:dateTime(?dob)),\r\n         \"\") as ?yob)\r\n         BIND(IF(bound(?dod),\r\n         YEAR(xsd:dateTime(?dod)),\r\n         \"\") as ?yod)\r\n         BIND(COALESCE(?thumbnail, \"\") as ?pic) .\r\n              FILTER (lang(?label) = 'en')\r\n    }`;\r\n\r\n    private queryDispatcher = new SPARQLQueryDispatcher(this.endpointUrl);\r\n\r\n    query = async (dbpediaId: string) => {\r\n        const query = await this.queryDispatcher.query(this.sparqlQuery(dbpediaId))\r\n        const queryRoot = await this.queryDispatcher.query(this.rootSparqlQuery(dbpediaId))\r\n\r\n        const queryData = mapQuery(query.results.bindings)\r\n        const rootQueryData = mapRootQuery(queryRoot.results.bindings)\r\n\r\n        return [...queryData, ...rootQueryData]\r\n    }\r\n}\r\n\r\nexport default DBpediaTreeQuery","import React from \"react\"\r\nimport { RouteComponentProps } from \"react-router-dom\"\r\nimport 'react-tabs/style/react-tabs.css'\r\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\"\r\nimport WikidataTreeQuery from \"../queries/wikidataTreeQuery\"\r\nimport Tree, { TreeData } from \"./Tree\"\r\nimport Statistics, { QueryOverview, QueryStatus } from \"./Statistics\"\r\nimport DBpediaTreeQuery from \"../queries/dbpediaTreeQuery\"\r\n\r\ntype State = {\r\n    wikidataQueryOverview: QueryOverview\r\n    dbpediaQueryOverview: QueryOverview\r\n\r\n    wikidataTreeData: TreeData[] | null\r\n    dbpediaTreeData: TreeData[] | null\r\n}\r\n\r\nclass TreeComparison extends React.Component<RouteComponentProps<any>, State> {\r\n    wikidataTreeQuery = new WikidataTreeQuery()\r\n    dbpediaTreeQuery = new DBpediaTreeQuery()\r\n\r\n    state: State = {\r\n        wikidataQueryOverview: {\r\n            status: QueryStatus.NotStarted,\r\n            nodeCount: null,\r\n            time: null,\r\n            error: null\r\n        },\r\n        dbpediaQueryOverview: {\r\n            status: QueryStatus.NotStarted,\r\n            nodeCount: null,\r\n            time: null,\r\n            error: null\r\n        },\r\n        dbpediaTreeData: null,\r\n        wikidataTreeData: null,\r\n    }\r\n\r\n    startComparison = async () => {\r\n        await this.startWikidataQuery();\r\n        await this.startDbPediaQuery();\r\n    }\r\n\r\n    startDbPediaQuery = async () => {\r\n        this.setState(prev => ({\r\n            dbpediaQueryOverview: {\r\n                ...prev.dbpediaQueryOverview,\r\n                status: QueryStatus.Running\r\n            }\r\n        }));\r\n\r\n        const dbpediaUrlId = 'http://dbpedia.org/resource/' + this.props.match.params.wikiId\r\n\r\n        try {\r\n            const startTime = new Date().getTime();\r\n            const dbpediaTreeData = await this.dbpediaTreeQuery.query(dbpediaUrlId);\r\n            const endTime = new Date().getTime();\r\n\r\n            const time = endTime - startTime;\r\n\r\n            console.log(dbpediaTreeData)\r\n\r\n            this.setState({\r\n                dbpediaQueryOverview: {\r\n                    status: QueryStatus.Finished,\r\n                    time,\r\n                    nodeCount: dbpediaTreeData.length,\r\n                    error: null\r\n                },\r\n                dbpediaTreeData\r\n            });\r\n        } catch (e) {\r\n            this.setState({\r\n                dbpediaQueryOverview: {\r\n                    status: QueryStatus.Failed,\r\n                    time: null,\r\n                    nodeCount: null,\r\n                    error: \"Error happened while querying data\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    startWikidataQuery = async () => {\r\n        this.setState(prev => ({\r\n            wikidataQueryOverview: {\r\n                ...prev.wikidataQueryOverview,\r\n                status: QueryStatus.Running\r\n            }\r\n        }));\r\n\r\n        try {\r\n            const startTime = new Date().getTime();\r\n            const wikidataTreeData = await this.wikidataTreeQuery.query(this.props.match.params.wikidataId);\r\n            const endTime = new Date().getTime();\r\n\r\n            const time = endTime - startTime;\r\n\r\n            this.setState({\r\n                wikidataQueryOverview: {\r\n                    status: QueryStatus.Finished,\r\n                    time,\r\n                    nodeCount: wikidataTreeData.length,\r\n                    error: null\r\n                },\r\n                wikidataTreeData\r\n            });\r\n        } catch (e) {\r\n            this.setState({\r\n                wikidataQueryOverview: {\r\n                    status: QueryStatus.Failed,\r\n                    time: null,\r\n                    nodeCount: null,\r\n                    error: \"Error happened while querying data\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startComparison();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Tabs forceRenderTabPanel={true}>\r\n                <TabList>\r\n                    <Tab>Statistics</Tab>\r\n                    <Tab>Wikidata Tree</Tab>\r\n                    <Tab>DBpedia Tree</Tab>\r\n                </TabList>\r\n\r\n                <TabPanel>\r\n                    <Statistics\r\n                        wikidataQueryOverview={this.state.wikidataQueryOverview}\r\n                        dbpediaQueryOverview={this.state.dbpediaQueryOverview}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    {this.state.wikidataTreeData === null\r\n                        ? <>Loading...</>\r\n                        : <Tree data={this.state.wikidataTreeData} />}\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    {this.state.dbpediaTreeData === null\r\n                        ? <>Loading...</>\r\n                        : <Tree data={this.state.dbpediaTreeData} />}\r\n                </TabPanel>\r\n            </Tabs>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TreeComparison","import SPARQLQueryDispatcher from '../query-dispatcher'\r\nimport { FilmographyData } from '../components/Filmography';\r\n\r\nconst mapQuery = (data): FilmographyData[] => {\r\n    return data\r\n        .map((x: any) => ({\r\n            film: x.film.value,\r\n            filmLabel: x.filmLabel.value,\r\n            description: x.filmDescription.value,\r\n            year: x.year.value,\r\n            image: x.pic1?.value ?? x.pic2?.value\r\n        }));\r\n}\r\n\r\nclass WikidataFilmQuery {\r\n    private endpointUrl = 'https://query.wikidata.org/sparql';\r\n    private sparqlQuery = (wikidataId: string) => `SELECT DISTINCT ?film ?filmLabel ?filmDescription (SAMPLE(?image) AS ?pic1) (SAMPLE(?logo) AS ?pic2) (SAMPLE(?pubYear) AS ?year) WHERE {\r\n        BIND(wd:${wikidataId}  as ?person) .\r\n        ?film wdt:P31 wd:Q11424 .\r\n        ?film wdt:P577 ?pubDate .\r\n        ?film wdt:P161 ?person .\r\n        OPTIONAL{?film wdt:P18 ?image} .\r\n        OPTIONAL{?film wdt:P154 ?logo} .\r\n        BIND(YEAR(?pubDate) as ?pubYear) .\r\n       SERVICE wikibase:label {\r\n         bd:serviceParam wikibase:language \"en\" .\r\n       }\r\n      } GROUP BY ?film ?filmLabel ?filmDescription`;\r\n\r\n    private queryDispatcher = new SPARQLQueryDispatcher(this.endpointUrl);\r\n\r\n    query = async (wikidataId: string) => {\r\n        const query = await this.queryDispatcher.query(this.sparqlQuery(wikidataId))\r\n\r\n        const queryData = mapQuery(query.results.bindings)\r\n        queryData.sort((a, b) => parseInt(b.year) - parseInt(a.year))\r\n        return queryData\r\n    }\r\n}\r\n\r\nexport default WikidataFilmQuery","import SPARQLQueryDispatcher from '../query-dispatcher'\r\nimport { FilmographyData } from '../components/Filmography';\r\n\r\nconst mapQuery = (data): FilmographyData[] => {\r\n    return data\r\n        .map((x: any) => ({\r\n            film: x.film.value,\r\n            filmLabel: x.label.value,\r\n            description: x.description.value,\r\n            year: x.year.value,\r\n            image: x.thumbnail?.value\r\n        }));\r\n}\r\n\r\nclass DBpediaFilmQuery {\r\n    private endpointUrl = 'https://dbpedia.org/sparql';\r\n    private sparqlQuery = (dbpediaId: string) => `SELECT DISTINCT ?film ?label ?year ?thumbnail ?description\r\n    WHERE {\r\n    BIND(<${dbpediaId}> as ?person) .\r\n    ?film rdf:type dbo:Film .\r\n    ?film rdfs:label ?label .\r\n    ?film dbo:starring ?person .\r\n    ?film dbo:abstract ?description\r\n    OPTIONAL {?film dbo:releaseDate ?date} \r\n    OPTIONAL {?film dbo:thumbnail?thumbnail}\r\n    BIND(IF(bound(?date), YEAR(xsd:dateTime(?date)), \"\") as ?year)\r\n    FILTER (lang(?label) = 'en')\r\n    FILTER (lang(?description) = 'en')\r\n    }`;\r\n\r\n    private queryDispatcher = new SPARQLQueryDispatcher(this.endpointUrl);\r\n\r\n    query = async (dbpediaId: string) => {\r\n        const query = await this.queryDispatcher.query(this.sparqlQuery(dbpediaId))\r\n\r\n        const queryData = mapQuery(query.results.bindings)\r\n        queryData.sort((a, b) => parseInt(b.year) - parseInt(a.year))\r\n        return queryData\r\n    }\r\n}\r\n\r\nexport default DBpediaFilmQuery","import React from \"react\";\r\n\r\nexport type FilmographyData = {\r\n    film: string\r\n    filmLabel: string\r\n    description: string\r\n    year: string\r\n    image: string\r\n}\r\n\r\ntype Props = {\r\n    data: FilmographyData[]\r\n    type: 'wikidata' | 'dbpedia'\r\n}\r\n\r\nconst FilmCard: React.FC<{ data: FilmographyData, type: 'wikidata' | 'dbpedia' }> = ({ data, type }) => (<>\r\n    <div className={`card ${type}`}>\r\n        <div className=\"content\">\r\n            {data.image !== undefined\r\n                ? <div className=\"image\">\r\n                    <img src={data.image}></img>\r\n                </div> : null\r\n            }\r\n            <div className=\"text\">\r\n                <strong>{data.filmLabel}</strong>\r\n                <p>{data.year}</p>\r\n                <p>{data.description}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</>)\r\n\r\nclass Filmography extends React.Component<Props> {\r\n    ref!: Element\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cards\">\r\n                {this.props.data.map((filmData, index) => <FilmCard data={filmData} key={index} type={this.props.type} />)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Filmography","import React from \"react\"\r\nimport { RouteComponentProps } from \"react-router-dom\"\r\nimport 'react-tabs/style/react-tabs.css'\r\nimport '../filmComparison.css'\r\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\"\r\nimport WikidataFilmQuery from \"../queries/wikidataFilmQuery\"\r\nimport DBpediaFilmQuery from \"../queries/dbpediaFilmQuery\"\r\nimport Filmography, { FilmographyData } from \"./Filmography\"\r\nimport Statistics, { QueryOverview, QueryStatus } from \"./Statistics\"\r\n\r\ntype State = {\r\n    wikidataQueryOverview: QueryOverview\r\n    dbpediaQueryOverview: QueryOverview\r\n\r\n    wikidataFilmData: FilmographyData[] | null\r\n    dbpediaFilmData: FilmographyData[] | null\r\n}\r\n\r\nclass FilmographyComparison extends React.Component<RouteComponentProps<any>, State> {\r\n    wikidataFilmQuery = new WikidataFilmQuery()\r\n    dbpediaFilmQuery = new DBpediaFilmQuery()\r\n\r\n    state: State = {\r\n        wikidataQueryOverview: {\r\n            status: QueryStatus.NotStarted,\r\n            nodeCount: null,\r\n            time: null,\r\n            error: null\r\n        },\r\n        dbpediaQueryOverview: {\r\n            status: QueryStatus.NotStarted,\r\n            nodeCount: null,\r\n            time: null,\r\n            error: null\r\n        },\r\n        dbpediaFilmData: null,\r\n        wikidataFilmData: null,\r\n    }\r\n\r\n    startComparison = async () => {\r\n        await this.startWikidataQuery();\r\n        await this.startDbPediaQuery();\r\n    }\r\n\r\n    startDbPediaQuery = async () => {\r\n        this.setState(prev => ({\r\n            dbpediaQueryOverview: {\r\n                ...prev.dbpediaQueryOverview,\r\n                status: QueryStatus.Running\r\n            }\r\n        }));\r\n\r\n        const dbpediaUrlId = 'http://dbpedia.org/resource/' + this.props.match.params.wikiId\r\n\r\n        try {\r\n            const startTime = new Date().getTime();\r\n            const dbpediaFilmData = await this.dbpediaFilmQuery.query(dbpediaUrlId);\r\n            const endTime = new Date().getTime();\r\n\r\n            const time = endTime - startTime;\r\n\r\n            console.log(dbpediaFilmData)\r\n\r\n            this.setState({\r\n                dbpediaQueryOverview: {\r\n                    status: QueryStatus.Finished,\r\n                    time,\r\n                    nodeCount: dbpediaFilmData.length,\r\n                    error: null\r\n                },\r\n                dbpediaFilmData\r\n            });\r\n        } catch (e) {\r\n            this.setState({\r\n                dbpediaQueryOverview: {\r\n                    status: QueryStatus.Failed,\r\n                    time: null,\r\n                    nodeCount: null,\r\n                    error: \"Error happened while querying data\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    startWikidataQuery = async () => {\r\n        this.setState(prev => ({\r\n            wikidataQueryOverview: {\r\n                ...prev.wikidataQueryOverview,\r\n                status: QueryStatus.Running\r\n            }\r\n        }));\r\n\r\n        try {\r\n            const startTime = new Date().getTime();\r\n            const wikidataFilmData = await this.wikidataFilmQuery.query(this.props.match.params.wikidataId);\r\n            const endTime = new Date().getTime();\r\n\r\n            console.log(wikidataFilmData)\r\n\r\n            const time = endTime - startTime;\r\n\r\n            this.setState({\r\n                wikidataQueryOverview: {\r\n                    status: QueryStatus.Finished,\r\n                    time,\r\n                    nodeCount: wikidataFilmData.length,\r\n                    error: null\r\n                },\r\n                wikidataFilmData\r\n            });\r\n        } catch (e) {\r\n            this.setState({\r\n                wikidataQueryOverview: {\r\n                    status: QueryStatus.Failed,\r\n                    time: null,\r\n                    nodeCount: null,\r\n                    error: \"Error happened while querying data\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startComparison();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Tabs forceRenderTabPanel={true}>\r\n                <TabList>\r\n                    <Tab>Statistics</Tab>\r\n                    <Tab>Wikidata Filmography</Tab>\r\n                    <Tab>DBpedia Filmography</Tab>\r\n                </TabList>\r\n\r\n                <TabPanel>\r\n                    <Statistics\r\n                        wikidataQueryOverview={this.state.wikidataQueryOverview}\r\n                        dbpediaQueryOverview={this.state.dbpediaQueryOverview}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    {this.state.wikidataFilmData === null\r\n                        ? <>Loading...</>\r\n                        : <Filmography data={this.state.wikidataFilmData} type='wikidata' />}\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    {this.state.dbpediaFilmData === null\r\n                        ? <>Loading...</>\r\n                        : <Filmography data={this.state.dbpediaFilmData} type='dbpedia' />}\r\n                </TabPanel>\r\n            </Tabs>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilmographyComparison","import React from \"react\";\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport TreeComparison from \"./TreeComparison\";\r\nimport FilmographyComparison from \"./FilmographyComparison\";\r\nimport Footer from \"./Footer\";\r\n\r\nexport default function Routing() {\r\n    return (\r\n        <>\r\n            <Router>\r\n                <>\r\n\r\n                    {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n                    <Switch>\r\n                        <Route path=\"/tree-comparison/:wikidataId/:wikiId\"\r\n                            render={props => <TreeComparison {...props} />}>\r\n                        </Route>\r\n                        <Route path=\"/filmography-comparison/:wikidataId/:wikiId\"\r\n                            render={props => <FilmographyComparison {...props} />}>\r\n                        </Route>\r\n                        <Route path=\"/\"\r\n                            render={props => <App {...props} />}>\r\n                        </Route>\r\n                    </Switch>\r\n                </>\r\n            </Router>\r\n        </>\r\n    );\r\n}","import React from \"react\"\r\nimport '../footer.css'\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n                All the data used to create family trees and filmography\r\n                is retrieved from <a href=\"https://www.wikidata.org/\">Wikidata</a> and <a href=\"https://wiki.dbpedia.org/\">DBpedia</a>.\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import ReactDOM from 'react-dom'\r\nimport App from './components/App'\r\nimport React from 'react';\r\nimport Routing from './components/Routing';\r\nimport Footer from './components/Footer';\r\n\r\nReactDOM.render(\r\n    <>\r\n        <div className=\"main\">\r\n            <Routing />\r\n        </div>\r\n        <Footer />\r\n    </>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}